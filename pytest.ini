# BALANCE-pyexcel pytest configuration
# This file controls how pytest discovers and runs tests for the balance_analyzer microservice
# Location: repo-root/pytest.ini

[pytest]
# Test Discovery Settings
# =======================
# Specify where pytest should look for tests by default
# This focuses testing on our actively maintained microservice tests
testpaths = tests/balance_analyzer

# Command Line Options
# ====================
# These options are automatically applied every time you run pytest
addopts = 
    # Show verbose output with test names (more informative than -q quiet mode)
    -v
    # Show shorter tracebacks for failures (easier to read)
    --tb=short
    # Show local variables in tracebacks (helpful for debugging)
    --showlocals
    # Fail fast: stop after first 3 failures (remove if you want to see all failures)
    --maxfail=3
    # Show summary of all test outcomes
    -ra
    # Enable strict markers (typos in marker names will cause errors)
    --strict-markers
    # Show warnings summary
    --disable-warnings

# Test Markers
# ============
# Define custom markers to categorize tests
# Usage: @pytest.mark.slow or @pytest.mark.integration
markers =
    slow: marks tests as slow running (deselect with '-m "not slow"')
    integration: marks tests that require external resources or data files
    unit: marks pure unit tests with no external dependencies
    config: marks tests related to configuration loading
    wip: marks work-in-progress tests that might be unstable

# Coverage Settings (uncomment to enable)
# ========================================
# Generate coverage reports for your microservice code
# addopts += --cov=src/baseline_analyzer --cov-report=term-missing --cov-report=html

# Python Path Configuration
# =========================
# Ensure Python can find your source code
pythonpath = src

# Test Collection Patterns
# ========================
# Customize how pytest identifies test files (defaults shown)
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output Settings
# ===============
# Control console output formatting
console_output_style = progress

# Logging Configuration
# =====================
# Capture log messages during test runs
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout Settings (requires pytest-timeout plugin)
# =================================================
# Prevent hanging tests from blocking your test suite
# timeout = 300  # 5 minutes default timeout per test