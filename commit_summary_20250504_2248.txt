feat: Switch PDF parsing to Tabula, add robust encoding fallback, and define schema

This commit replaces Camelot with Tabula-py for PDF table extraction to resolve persistent Ghostscript integration issues on Windows. It also introduces robust encoding handling and defines the schema for the extracted PDF data.

**Key Changes:**

1.  **Library Switch (`scripts/process_pdfs.py`):**
    *   Replaced `import camelot` with `import tabula`.
    *   Updated `process_pdf` and related functions to use `tabula.read_pdf` instead of `camelot.read_pdf`.
    *   Removed the Ghostscript check at the end of the script.

2.  **Tabula Configuration (`scripts/process_pdfs.py`):**
    *   Switched from `lattice=True` to `stream=True` in `tabula.read_pdf` call, which is more suitable for typical bank statement layouts.
    *   Added `guess=True` to improve table boundary detection.
    *   Added `pandas_options={"dtype": str}` to ensure all extracted data is initially treated as strings, preventing type inference issues.

3.  **Encoding Fallback (`scripts/process_pdfs.py`):**
    *   Introduced a `read_with_fallback` helper function.
    *   This function first attempts to read the PDF using `tabula.read_pdf` with `encoding='utf-8'`.
    *   If a `UnicodeDecodeError` occurs (e.g., due to Windows-specific characters like smart quotes), it retries with `encoding='cp1252'`.
    *   If the `cp1252` retry also fails with `UnicodeDecodeError`, it makes a final attempt using `encoding='utf-8'` and `errors='ignore'` in `pandas_options` to ensure the file is processed even if some characters cannot be decoded.
    *   This successfully resolved the decoding error previously encountered with `Document (7).pdf`.

4.  **JVM Shutdown (`scripts/process_pdfs.py`):**
    *   Added a `try...except` block at the end of the script (`if __name__ == "__main__":`) to explicitly shut down the Java Virtual Machine (JVM) using `jpype.shutdownJVM()` if `jpype` was used by `tabula-py`.
    *   This prevents the `java.exe` process from lingering after the script finishes, ensuring the terminal prompt returns immediately.

5.  **PDF Schema Definition (`rules/schema_registry.yml`):**
    *   Defined the `jordyn_pdf` schema, mapping the 15 columns extracted by `tabula-py` (e.g., 'Date', 'Description', 'Amount') to the canonical column names used in the pipeline (e.g., 'TransDate', 'RawMerchant', 'Amount').
    *   Set the appropriate `glob` pattern (`BALANCE - Jordyn PDF -*.csv`) to match the output filenames from `process_pdfs.py`.

6.  **PDF Ingest Testing (`tests/`):**
    *   Created a sample fixture file `tests/fixtures/jordyn_pdf_sample.csv` containing representative rows from a processed PDF CSV.
    *   Created a new test file `tests/test_pdf_ingest.py` with tests to validate that the `jordyn_pdf` schema correctly processes the sample fixture data, ensuring the mapping works as expected and guarding against regressions.

These changes provide a more robust and reliable PDF processing solution that works consistently on the target Windows environment and integrates the extracted data into the existing pipeline.
