feat(accounting): Overhaul and stabilize reconciliation engine

This major update resolves critical accounting inconsistencies and establishes a robust foundation for the financial reconciliation system. The core logic has been significantly refactored to ensure accuracy, consistency, and maintainability.

Key Changes:

1.  **Universal Accounting Model:**
    *   Implemented a universal accounting principle (`net_effect = allowed_amount - actual_amount`) across all transaction types.
    *   This resolves the previous data integrity issues where different transaction types had conflicting accounting models.

2.  **Centralized Logic in `baseline_math.py`:**
    *   All core accounting logic, including data cleaning, rule application, and rent processing, is now centralized within the `baseline_analyzer` package.
    *   `audit_run.py` has been simplified to a data loader and runner, delegating all processing to `baseline_math.py`. This eliminates data handoff errors between scripts.

3.  **Comprehensive System Verification:**
    *   The system now passes a full audit, with the grand total correctly zeroing out and all per-row integrity checks passing.
    *   The original ~$11,000 imbalance caused by rent double-processing has been definitively fixed.

4.  **New System Artifacts:**
    *   `create_enhanced_audit_trail.py`: A new script that generates a clean, comprehensive audit trail CSV with detailed, transaction-level data and running balances.
    *   `system_documentation.md`: Provides a detailed overview of the new system architecture, data flow, and core logic.
    *   `user_guide.md`: A guide for running the system, interpreting results, and handling common issues.
    *   `system_improvement_recommendations.md`: Outlines strategic next steps for code quality, feature enhancements, and data pipeline improvements.

5.  **Regression Test Suite:**
    *   A new test suite, `tests/test_system_integrity.py`, has been created to validate the core accounting rules (rent, 50/50 split, full allocation, cashback).
    *   This suite ensures that future changes will not break existing functionality.

This commit marks a transition from a debugging phase to a stable, verified system ready for future feature development.
