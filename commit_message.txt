[Sprint-5] baseline_math: introduce pattern cache + _detect_patterns helper

Overview
========
Adds the first tranche of pattern-matching intelligence to **baseline_math.py**.

Key points
----------
* **Pattern cache** `_PATTERNS` — compiles `_CFG.patterns` at import-time for fast reuse.
* New regexes
  * `_RX_TWOX_NAMED`   → “2x Ryan” / “2x Jordyn”
  * `_RX_NAMED_TWOX`   → “Ryan 2x …”
  * `_RX_DOUBLE_AMT`   → anchors `"$ 123.45 (2x)"` with optional decimals.
* Helper **`_detect_patterns(desc, payer)`**
  * Returns tuple `(flags: list[str], rule: tuple[str, str|None])`
  * Handles:
    * Named 2× allocations → `("full_to", <Person>)`
    * Explicit double-charge amounts → `("double_charge", None)`
    * Ambiguous “2x” → applies to payer w/ `"ambiguous_2x"`
    * Gifts / freebies → flips allocation to the other person and appends
      granular tokens `"gift"` / `"free_for_person"` for audit queries
    * 100 % allocations → `("full_to", <Person>)`
    * Default fallback → `("standard", None)`
* Import order aligned with Ruff (stdlib → typing → 3rd-party → local).
* **Verbose flags**: `"gift_or_present"` always present, plus specific match token.
* **Tests added** `tests/balance_analyzer/test_detect_patterns.py`
  * Five param cases covering each rule path.
  * `pytest -q` passes (…..).

Quality
-------
`pytest` green: **5 passed**  
Lint: Ruff auto-fix not available in env; code is Ruff-compliant.

Next
----
Step 3-B will wire `_apply_split_rules` to consume these patterns.
