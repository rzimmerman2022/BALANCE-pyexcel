feat(opening_balance): implement Opening Balance injection logic and tests

Sprint #4 completion – Baseline Analyzer
---------------------------------------

### ✨  New functionality
* Added full algorithm to `src/baseline_analyzer/opening_balance.py`
  – Inserts one synthetic “Opening Balance” row **one day before** the first
    transaction in each distinct account.
  – Maintains prior behaviour of returning an unchanged copy when the required
    columns are absent, preserving generic-DataFrame callers and stub tests.
  – Auto-detects a descriptive column (`Merchant` → `Description` → creates
    `Merchant`) and stamps `cfg.opening_balance_col` as the label.
  – Sets the configured *Amount* column to **0** and keeps column order.

### 🧪  Tests & fixtures
* `tests/balance_analyzer/fixtures/mini.csv`
  Minimal 3-row sample covering two accounts.
* `tests/balance_analyzer/test_inject_opening_balance_basic.py`
  Validates:
    – row-count increase equals #accounts,
    – first row per account has opening-balance label,
    – date equals (first_txn_date – 1 day).
* Adjusted legacy stub test to expect a silent no-op when the “Account”
  column is missing.

### ✅  Result
All Balance-Analyzer tests pass:

    pytest tests/balance_analyzer -q
    ......  [100%]

No additional configuration keys were required; YAML already exposes
`opening_balance_col`.

Closes Sprint #4 tasks 4-1 → 4-5.
