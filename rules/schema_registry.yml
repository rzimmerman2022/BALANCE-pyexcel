# ==============================================================================
# File:    schema_registry.yml
# Project: BALANCE-pyexcel
# Author:  Ryan Zimmerman / AI Assistant
# Purpose: Defines rules for parsing different bank/source CSV formats.
#          The 'ingest.py' script reads this file to determine how to handle
#          each unique CSV layout dynamically.
#
# Revision History:
# 2025-04-21 (v0.1.0) - Initial creation based on proposal, added comments.
# 2025-04-22 (v0.1.1) - Corrected Discover & WF header_signatures,
#                        fixed WF amount handling (use direct map, remove derived),
#                        fixed Monarch date mapping & sign rule, added Category maps.
# ==============================================================================
# Instructions: To add a new CSV format:
# 1. Copy an existing block (e.g., `- id: ... sign_rule: ...`).
# 2. Change the `id` to something unique (e.g., `amex_blue_cash`).
# 3. Update `match_filename` with a glob pattern matching the new CSV's name.
# 4. Update `header_signature` with a few column names unique to that CSV format.
# 5. Update `column_map` to map the CSV's column names to our STANDARD_COLS.
# 6. Choose the correct `sign_rule` ('as_is', 'flip_if_positive', 'flip_if_withdrawal').
# 7. Add `derived_columns` only if needed (like the original WF example, now removed).
# ==============================================================================
# --- Start of Schema Definitions ---

# ------------------------------------------------------------------------------
# Schema ID: chase_total_checking
# Description: Rules for Chase Total Checking account exports.
# ------------------------------------------------------------------------------
- id: chase_total_checking
  # How to identify files matching this schema (uses glob pattern matching on filename).
  match_filename: "Jordyn - Chase Bank - Total Checking*" # Matches files starting like this
  # List of column headers that MUST be present in the CSV to confirm it's this schema. Case-sensitive.
  header_signature: ["Name", "Institution", "Account Type", "Transaction Date"]
  # Mapping from the column names found IN THE CSV to our STANDARD column names.
  column_map:
    Transaction Date: Date       # Source 'Transaction Date' maps to our 'Date'
    Description: Description    # Source 'Description' maps to our 'Description'
    Post Date: PostDate         # NEW - Map "Post Date" to "PostDate"
    Amount: Amount              # Source 'Amount' maps to our 'Amount'
    Category: Category          # Source 'Category' maps to our 'Category' (Chase provides this)
    Account Type: Account       # Map Account Type to our standard Account column
  # Rule for correcting the sign of the 'Amount' column.
  # 'flip_if_withdrawal': Makes 'Amount' negative ONLY IF the 'Category' column
  #                       contains 'Withdrawal' or 'Payment' (case-insensitive).
  #                       Assumes deposits are already negative in the source file.
  sign_rule: flip_if_withdrawal

# ------------------------------------------------------------------------------
# Schema ID: discover_it_card
# Description: Rules for Discover It credit card exports.
# ------------------------------------------------------------------------------
- id: discover_it_card
  # How to identify files matching this schema (glob pattern).
  match_filename: "Jordyn - Discover - Discover It Card*"
  # Header check: Ensure these specific columns exist in the CSV.
  header_signature: ["Name", "Institution", "Card Type", "Date"]
  # Column mapping: Source CSV column -> Standard internal column name.
  column_map:
    Date: Date
    Post Date: PostDate         # NEW - Map "Post Date" to "PostDate"
    Description: Description
    Amount: Amount
    Category: Category          # Discover sample includes Category
    Card Type: Account         # Map Card Type to our standard Account column
    # Example: Transaction Type: Transaction Type # Assuming a column named "Transaction Type" exists in some Discover CSVs
  # Sign rule: How to handle the Amount sign.
  # This demonstrates the complex sign rule. If 'Transaction Type' column is not present
  # or doesn't match, amounts might not be flipped as expected by this rule.
  # The 'as_is' rule was based on a sample where payments were already negative.
  # This complex rule would override 'as_is' if the conditions are met.
  sign_rule:
    type: flip_if_column_value_matches
    # IMPORTANT: 'column' refers to the column name *after* mapping by 'column_map' if it was mapped,
    # OR the original column name if it wasn't explicitly mapped but exists in the CSV.
    # For this example, let's assume "Transaction Type" is a column that might exist in the source
    # and we want to use its raw name. If it were mapped, e.g. "Details" -> "TransactionTypeMapped",
    # then 'column' here should be "TransactionTypeMapped".
    # For simplicity, assuming "Transaction Type" is the raw column name to check.
    column: "Transaction Type" # Raw name from CSV
    debit_values: ["debit", "withdrawal", "payment"] # Case-insensitive match
    # If 'Transaction Type' (normalized) matches one of these, and Amount is positive, flip it.
    # If 'Transaction Type' matches and Amount is negative, it's kept as is (already a debit).
    # If 'Transaction Type' does NOT match (e.g., "credit", "refund"), and Amount is negative, flip it to positive.
    # If 'Transaction Type' does NOT match and Amount is positive, it's kept as is (already a credit/inflow).
    # This logic implies: flip positive amounts if debit_value matches; flip negative amounts if debit_value does NOT match.
    # This is a common pattern for credit card statements where debits are positive and credits are negative.
    # The goal is: outflows are negative, inflows are positive.
    # So:
    # 1. If type in debit_values: Amount should be negative. If current Amount > 0, flip.
    # 2. If type NOT in debit_values (i.e., it's a credit/refund): Amount should be positive. If current Amount < 0, flip.

# ------------------------------------------------------------------------------
# Schema ID: wells_fargo_card
# Description: Rules for Wells Fargo Active Cash card exports.
# ------------------------------------------------------------------------------
- id: wells_fargo_card
  # How to identify files matching this schema (glob pattern).
  match_filename: "Jordyn - Wells Fargo - Active Cash*"
  # Header check: Ensure these specific columns exist in the CSV.
  header_signature: ["Name", "Institution", "Account Description"]
  # Column mapping: Source CSV column -> Standard internal column name.
  column_map:
    Date: Date
    Post Date: PostDate         # NEW - Map "Post Date" to "PostDate"
    Description: Description
    Amount: Amount              # <<< FIX: Added direct Amount mapping (sample confirmed it exists)
    Category: Category          # <<< FIX: Added direct Category mapping (sample confirmed it exists)
    Account Description: Account # Map Account Description to our standard Account column
  # derived_columns:             # <<< FIX: REMOVED derived_columns section (not needed)
  # Sign rule: How to handle the Amount sign.
  # 'flip_if_positive': Makes any positive Amount negative. Assumes credits/payments are negative.
  #                     Chosen because Purchases in sample were positive.
  sign_rule: flip_if_positive   # <<< FIX: Changed from as_is based on sample data review
  # Static columns to add to every row from this source
  extra_static_cols:
    Bank: "Wells Fargo"    # Added to prevent TxnID collisions

# ------------------------------------------------------------------------------
# Schema ID: monarch_export
# Description: Rules for exports generated from Monarch Money aggregator.
# ------------------------------------------------------------------------------
- id: monarch_export
  # How to identify files matching this schema (glob pattern).
  match_filename: "BALANCE - Monarch Money*"
  # Header check: Ensure these specific columns exist in the CSV.
  header_signature: ["Merchant", "Account", "Original Statement"]
  # Static columns to add to every row from this source
  extra_static_cols:
    Source: "Monarch"
  # Column mapping: Source CSV column -> Standard internal column name.
  column_map:
    Date: Date
    Merchant: Description       # Use Monarch's 'Merchant' field as our standard 'Description'.
    Amount: Amount
    Account: Account
    Institution: Bank           # Map Institution to Bank for consistent naming
    Category: Category
  # Sign rule: How to handle the Amount sign.
  # 'as_is': Keep the sign as is. Monarch sample showed outflows were already negative.
  sign_rule: as_is

# ------------------------------------------------------------------------------
# Schema ID: rocket_money
# Description: Rules for exports generated from Rocket Money aggregator.
# ------------------------------------------------------------------------------
- id: rocket_money
  # How to identify files matching this schema (glob pattern).
  match_filename: "BALANCE - Rocket Money*"
  # Header check: Ensure these specific columns exist in the CSV.
  header_signature: ["Account Name", "Institution Name", "Amount"]
  # Static columns to add to every row from this source
  extra_static_cols:
    Source: "Rocket"
  # Column mapping: Source CSV column -> Standard internal column name.
  column_map:
    Date: Date
    Description: Description    # Use the existing Description field instead of Name
    Amount: Amount
    Account Name: Account       # Use Rocket Money's 'Account Name' as our standard 'Account'.
    Institution Name: Bank      # Map Institution Name to Bank for consistent naming
    Category: Category
  # Sign rule: How to handle the Amount sign.
  # 'flip_if_positive': Flips positive amounts to negative.
  #                     Rocket Money sample showed expenses were positive.
  sign_rule: flip_if_positive

# ------------------------------------------------------------------------------
# Schema ID: jordyn_pdf_document
# Description: Rules for CSVs generated from Jordyn's PDFs (Document*.csv files)
#              These files have MM/DD date format and need year inference.
# ------------------------------------------------------------------------------
- id: jordyn_pdf_document
  match_filename: "BALANCE - Jordyn PDF - Document*.csv"
  header_signature: ["TransDate", "RawMerchant", "Amount", "AccountLast4"]
  extra_static_cols:
    Bank: "Wells Fargo"
  column_map:
    TransDate:   Date
    RawMerchant: Description
    Amount:      Amount
    AccountLast4: Account
    PostDate: PostDate # Assuming PostDate might exist or be added
    ReferenceNumber: ReferenceNumber # Assuming ReferenceNumber might exist
  # No date_format specified initially, to let pandas infer MM/DD.
  # Year will need to be inferred or added, potentially in ingest.py if parsing fails.
  amount_regex: '-?\$?([\d,]+\.\d{2})'
  sign_rule: flip_if_positive

# ------------------------------------------------------------------------------
# Schema ID: jordyn_pdf
# Description: Rules for CSVs generated from Jordyn's PDFs via process_pdfs.py script.
# NOTE: Header signature and column map are initial guesses based on typical PDF
#       statement structures extracted by Camelot. May need refinement after
#       inspecting the actual CSV output from the script.
# ------------------------------------------------------------------------------
- id: jordyn_pdf
  # Match CSVs generated by the updated process_pdfs.py script (YYYY-MM format) OR the test sample
  match_filename: "BALANCE - Jordyn PDF - *.csv" # Revert to specific pattern
  # Header signature expected from the updated script (matching fixture)
  header_signature: ["TransDate", "RawMerchant", "Amount"] # Corrected header signature
  # Static columns to add
  extra_static_cols:
    Bank: "Wells Fargo"
  # Column mapping for the CSVs *after* processing by process_pdfs.py
  column_map:
    TransDate:   Date        # Map CSV 'TransDate' (now with year) to standard 'Date'
    RawMerchant: Description # Map CSV 'RawMerchant' to standard 'Description'
    Amount:      Amount      # Map CSV 'Amount' (cleaned) to standard 'Amount'
    AccountLast4: Account    # Map AccountLast4 to standard Account
    PostDate: PostDate
    ReferenceNumber: ReferenceNumber      # (leave Comment above)
  # Date format expected in the CSV after PDF processing.
  date_format: '%m/%d/%Y' # Corrected to match fixture data
  # Regex to clean the Amount column before converting to numeric.
  # Strips optional leading hyphen, optional dollar sign, and commas.
  amount_regex: '-?\$?([\d,]+\.\d{2})' # Added to handle potential formatting issues
  # Sign rule: Fixture shows positive amounts, so flip them.
  sign_rule: flip_if_positive # Changed from as_is to match fixture data

# ------------------------------------------------------------------------------
# Schema ID: jordyn_pdf_document
# Description: Rules for CSVs generated from Jordyn's PDFs (Document*.csv files)
#              These files have MM/DD date format and need year inference.

# ------------------------------------------------------------------------------
# Schema ID: test_data_source1
# Description: For test_cli_integration.py data_source1.csv
# ------------------------------------------------------------------------------
- id: test_data_source1
  match_filename: "data_source1.csv"
  header_signature: ["Date", "Description", "Amount", "Account", "Category", "Bank"] # Basic assumption
  column_map:
    Date: Date
    Description: Description
    Amount: Amount
    Account: Account
    Category: Category
    Bank: Bank
  sign_rule: as_is # Default, adjust if tests imply specific sign handling
  extra_static_cols:
    Source: "TestSource1"

# ------------------------------------------------------------------------------
# Schema ID: test_data_source2
# Description: For test_cli_integration.py data_source2.csv
# ------------------------------------------------------------------------------
- id: test_data_source2
  match_filename: "data_source2.csv"
  header_signature: ["Date", "Description", "Amount", "Account", "Category", "Bank"] # Basic assumption
  column_map:
    Date: Date
    Description: Description
    Amount: Amount
    Account: Account
    Category: Category
    Bank: Bank
  sign_rule: as_is # Default, adjust if tests imply specific sign handling
  extra_static_cols:
    Source: "TestSource2"

# ==============================================================================
# End of Schema Registry File
# ==============================================================================
