feat(baseline_analyzer): implement ledger split-rules & net-effect math (Sprint-5 · 3-B)

Context
• Phase 3-B introduces full math for **transaction-ledger** rows while leaving Expense-History
  rows untouched (handled in 3-C).  This commit delivers the split-rule engine, net-effect
  calculations, audit/summary outputs, and exhaustive tests.

Key additions
1. baseline_math.py
   • NEW helper `_apply_split_rules()`  
     – Handles three rule kinds:  
       · SR ‑ Standard 50/50 split  
       · DC ‑ Documented “double-charge (2x)” keeping 50/50  
       · FT ‑ Full reimbursement to a single party (payer default or target override)  
     – Returns `(allowed_ryan, allowed_jordyn, note)` with grep-friendly prefixes.
   • `build_baseline()`  
     – Guards against empty expense_df.  
     – Runs `_detect_patterns` → `_apply_split_rules` per ledger row.  
     – Emits two person-rows with `allowed_amount`, computes fair half & `net_effect`.  
     – Builds `audit_df` ordered by `_CFG.audit_columns`; creates `summary_df`
       (`net_owed`) and asserts balance within rounding tolerance.

2. tests/balance_analyzer/test_split_rules.py
   • Parametric pytest covering five scenarios:
     1. “Toll 15 (2x Ryan)” → full to Ryan
     2. “Ryan 2x bridge toll” → full to Ryan (alt pattern)
     3. “Service fee $40 (2x)” → double-charge documented (50/50)
     4. “Gift for Jordyn” → full to Jordyn
     5. “Lunch split” → standard 50/50
   • Asserts per-person `allowed_amount` and overall zero-sum `net_effect`.

Outcome
Running `pytest tests/balance_analyzer/test_split_rules.py -q` prints `.....` confirming all
branches pass.  Ledger math is now production-ready; Expense-History explode arrives in 3-C.

Co-author: Cline (AI)
