Attribute VB_Name = "ImportFromTemp"
' ============================================================================
' Module: ImportFromTemp
' Project: BALANCE-pyexcel
' Description: VBA module to automate importing data from temporary Excel files
'              generated by the Python CLI tool
' ============================================================================

Option Explicit

' ===========================================================================
' Function: ImportFromTempFile
' Description: Imports transaction data from a temporary Excel file generated
'              by the balance-pyexcel CLI tool
' ===========================================================================
Public Sub ImportFromTempFile()
    Dim tempFile As String
    Dim queueSheet As String
    Dim wsTransactions As Worksheet
    Dim wsQueue As Worksheet
    Dim wsTemp As Worksheet
    Dim wsTempQueue As Worksheet
    Dim tempWB As Workbook
    
    ' Set the queue sheet name (must match what CLI uses)
    queueSheet = "Queue_Review"
    
    ' Determine path to temporary file based on current workbook
    tempFile = ThisWorkbook.Path & "\" & Replace(ThisWorkbook.Name, ".xlsm", ".temp.xlsx")
    
    ' Check if temp file exists
    If Dir(tempFile) = "" Then
        MsgBox "Temporary file not found at:" & vbCrLf & vbCrLf & _
               tempFile & vbCrLf & vbCrLf & _
               "Run the balance-pyexcel CLI tool first to generate the temporary file.", _
               vbExclamation, "Import Failed"
        Exit Sub
    End If
    
    ' Backup current state
    On Error Resume Next
    Application.DisplayAlerts = False
    If SheetExists("Transactions_Backup") Then
        ThisWorkbook.Sheets("Transactions_Backup").Delete
    End If
    If SheetExists("Transactions") Then
        ThisWorkbook.Sheets("Transactions").Copy Before:=ThisWorkbook.Sheets(1)
        ThisWorkbook.Sheets(1).Name = "Transactions_Backup"
    End If
    Application.DisplayAlerts = True
    On Error GoTo 0
    
    ' Open the temporary file
    On Error Resume Next
    Set tempWB = Workbooks.Open(tempFile)
    If Err.Number <> 0 Then
        MsgBox "Failed to open temporary file: " & tempFile & vbCrLf & _
               "Error: " & Err.Description, vbCritical, "Import Failed"
        Exit Sub
    End If
    On Error GoTo 0
    
    ' Check if Transactions sheet exists in temp file
    If Not SheetExists("Transactions", tempWB) Then
        MsgBox "Transactions sheet not found in temporary file!", vbExclamation, "Import Failed"
        tempWB.Close False
        Exit Sub
    End If
    
    ' Copy transactions sheet
    tempWB.Sheets("Transactions").Copy After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)
    
    ' If we don't have the sheet already, and temp file has it, copy it
    If Not SheetExists(queueSheet) And SheetExists(queueSheet, tempWB) Then
        tempWB.Sheets(queueSheet).Copy After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)
    ' If we have the sheet and temp file has it, update with new rows only
    ElseIf SheetExists(queueSheet) And SheetExists(queueSheet, tempWB) Then
        ImportQueueRows ThisWorkbook.Sheets(queueSheet), tempWB.Sheets(queueSheet)
    End If
    
    ' Close temp file without saving
    tempWB.Close False
    
    ' Success message
    MsgBox "Successfully imported data from temporary file." & vbCrLf & vbCrLf & _
           "Transactions sheet has been updated." & vbCrLf & _
           "Previous version saved as 'Transactions_Backup'.", _
           vbInformation, "Import Successful"
           
    ' Offer to delete the temp file
    If MsgBox("Would you like to delete the temporary file now?", _
              vbQuestion + vbYesNo, "Delete Temp File?") = vbYes Then
        On Error Resume Next
        Kill tempFile
        If Err.Number <> 0 Then
            MsgBox "Could not delete temporary file. It may be in use." & vbCrLf & _
                   "Please delete it manually: " & tempFile, _
                   vbExclamation, "Delete Failed"
        End If
    End If
End Sub

' ===========================================================================
' Function: SheetExists
' Description: Checks if a worksheet exists in the specified workbook
' ===========================================================================
Private Function SheetExists(ByVal sheetName As String, Optional ByVal wb As Workbook) As Boolean
    Dim ws As Worksheet
    
    If wb Is Nothing Then Set wb = ThisWorkbook
    
    On Error Resume Next
    Set ws = wb.Sheets(sheetName)
    SheetExists = (Err.Number = 0)
    On Error GoTo 0
End Function

' ===========================================================================
' Function: ImportQueueRows
' Description: Updates the Queue_Review sheet with new transactions from temp file
' ===========================================================================
Private Sub ImportQueueRows(ByVal targetWS As Worksheet, ByVal sourceWS As Worksheet)
    Dim targetLastRow As Long
    Dim sourceLastRow As Long
    Dim txnIDCol As Long
    Dim i As Long, j As Long
    Dim sourceTxnIDs As Collection
    Dim txnID As Variant
    Dim foundMatch As Boolean
    
    ' Find TxnID column in both sheets
    txnIDCol = GetColumnByHeader(targetWS, "TxnID")
    If txnIDCol = 0 Then
        txnIDCol = 1 ' Default to first column if header not found
    End If
    
    ' Get last rows
    targetLastRow = GetLastRow(targetWS)
    sourceLastRow = GetLastRow(sourceWS)
    
    ' Collect all TxnIDs from target sheet
    Set sourceTxnIDs = New Collection
    On Error Resume Next ' In case of duplicate keys
    For i = 2 To targetLastRow ' Assuming header is in row 1
        If Len(targetWS.Cells(i, txnIDCol).Value) > 0 Then
            sourceTxnIDs.Add targetWS.Cells(i, txnIDCol).Value, CStr(targetWS.Cells(i, txnIDCol).Value)
        End If
    Next i
    On Error GoTo 0
    
    ' Copy headers if target sheet is empty
    If targetLastRow <= 1 Then
        sourceWS.Rows(1).Copy
        targetWS.Rows(1).PasteSpecial xlPasteValues
        targetWS.Rows(1).PasteSpecial xlPasteFormats
    End If
    
    ' Add rows from source that don't exist in target
    For i = 2 To sourceLastRow ' Assuming header is in row 1
        txnID = sourceWS.Cells(i, txnIDCol).Value
        If Len(txnID) > 0 Then
            foundMatch = False
            
            On Error Resume Next
            ' Check if this TxnID exists in our collection
            sourceTxnIDs.Item CStr(txnID)
            foundMatch = (Err.Number = 0)
            On Error GoTo 0
            
            If Not foundMatch Then
                ' Add this row to the target sheet
                targetLastRow = targetLastRow + 1
                sourceWS.Rows(i).Copy
                targetWS.Rows(targetLastRow).PasteSpecial xlPasteValues
                
                ' Add to our collection to avoid duplicates if source has duplicates
                On Error Resume Next
                sourceTxnIDs.Add txnID, CStr(txnID)
                On Error GoTo 0
            End If
        End If
    Next i
    
    Application.CutCopyMode = False
End Sub

' ===========================================================================
' Function: GetColumnByHeader
' Description: Finds the column number for a given header text
' ===========================================================================
Private Function GetColumnByHeader(ByVal ws As Worksheet, ByVal headerText As String) As Long
    Dim lastCol As Long
    Dim i As Long
    
    GetColumnByHeader = 0 ' Default return if not found
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    For i = 1 To lastCol
        If ws.Cells(1, i).Value = headerText Then
            GetColumnByHeader = i
            Exit Function
        End If
    Next i
End Function

' ===========================================================================
' Function: GetLastRow
' Description: Gets the last used row in a worksheet
' ===========================================================================
Private Function GetLastRow(ByVal ws As Worksheet) As Long
    GetLastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
End Function

' ===========================================================================
' Function: RefreshData
' Description: Runs the CLI tool and imports the results
' ===========================================================================
Public Sub RefreshData()
    Dim result As Long
    Dim cmd As String
    Dim repoPath As String
    Dim csvPath As String
    Dim workbookPath As String
    
    ' Save the workbook first
    ThisWorkbook.Save
    
    ' Build paths
    repoPath = ThisWorkbook.Path
    If Right(repoPath, 8) = "workbook" Then
        ' If we're in a workbook subdirectory, go up one level
        repoPath = Left(repoPath, Len(repoPath) - 9)
    End If
    
    csvPath = repoPath & "\sample_data_multi"
    workbookPath = ThisWorkbook.FullName
    
    ' Ask user to confirm
    If MsgBox("This will run the balance-pyexcel CLI tool to refresh data." & vbCrLf & _
              "- CSV Path: " & csvPath & vbCrLf & _
              "- Workbook: " & workbookPath & vbCrLf & vbCrLf & _
              "Continue?", vbQuestion + vbYesNo, "Refresh Data") = vbNo Then
        Exit Sub
    End If
    
    ' Build the command
    cmd = "cmd /c cd """ & repoPath & """ && " & _
          "poetry run balance-pyexcel """ & csvPath & """ """ & workbookPath & """"
    
    ' Run the command
    result = Shell(cmd, vbMinimizedNoFocus)
    
    ' Wait a bit for the command to finish
    If result <> 0 Then
        MsgBox "Command started successfully. Once it completes, click 'Import Data' to update the workbook.", _
               vbInformation, "Processing Started"
    Else
        MsgBox "Error starting command. Please run the CLI tool manually.", _
               vbCritical, "Command Failed"
    End If
End Sub
