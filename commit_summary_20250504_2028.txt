feat: Implement merchant normalization, PDF ingest setup, DuckDB output, CI updates

This commit addresses several items from the code review and implements key features for the next sprint.

**Gaps Addressed:**

*   **normalize.py:** Initialized `SplitPercent` column with `pd.NA` to prevent downstream errors.
*   **ingest.py:** Replaced hard-coded `rules/schema_registry.yml` path with `config.SCHEMA_REGISTRY_PATH`.
*   **ingest.py:** Added `dayfirst=False` to `pd.to_datetime` call to correctly handle MM/DD/YY date formats.
*   **README.md:** Added instructions for building and using a standalone executable via PyInstaller.

**PDF Ingest Automation (Initial Setup):**

*   **Dependencies:** Added `camelot-py[cv]` and `tabula-py` to `pyproject.toml`.
*   **Script:** Created `scripts/process_pdfs.py` using Camelot to extract tables from PDFs in a specified directory and save them as CSVs. Includes basic error handling.
*   **Schema:** Added a placeholder schema (`jordyn_pdf`) to `rules/schema_registry.yml` for CSVs generated by the PDF script. Includes comments that refinement is needed based on actual output.
*   **README.md:** Added Ghostscript to prerequisites and included usage instructions for `scripts/process_pdfs.py`.

**DuckDB Integration (Phase 1 - Read-Only):**

*   **Dependency:** Added `duckdb` to `pyproject.toml`.
*   **cli.py:** Modified the script to save the final processed DataFrame to `Final_Output.parquet` in the workbook's directory.
*   **README.md:** Added a section explaining how to use the Parquet file with DuckDB CLI and connect via ODBC/Power Query.

**Cross-Platform CI:**

*   **Workflow:** Created new GitHub Actions workflow `workflows/ci.yml`.
    *   Includes a test matrix for Ubuntu/Windows and Python 3.10/3.11.
    *   Builds and uploads documentation (`site/`) as an artifact.
    *   Builds and uploads a Windows executable (`dist/balance-pyexcel.exe`) as an artifact.
    *   Includes a job to deploy docs to GitHub Pages on pushes to `main`.
*   **Cleanup:** Deleted the old `workflows/docs.yml`.

**Merchant Normalization:**

*   **Lookup Table:** Created `rules/merchant_lookup.csv` with regex patterns and canonical names.
*   **Module:** Created `src/balance_pipeline/merchant.py` with the `normalize_merchant` function, including regex compilation, lookup logic, and LRU caching.
*   **Integration:** Imported and used `normalize_merchant` in `src/balance_pipeline/normalize.py` to create a new `CanonMerchant` column. Added `CanonMerchant` to `FINAL_COLS`.
*   **Tests:** Created `tests/test_merchant.py` with parametrized tests covering various scenarios based on the lookup table and expected fallbacks.
